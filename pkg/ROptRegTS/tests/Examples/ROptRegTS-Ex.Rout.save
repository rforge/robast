
R Under development (unstable) (2019-02-27 r76167) -- "Unsuffered Consequences"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: i386-w64-mingw32/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ROptRegTS"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('ROptRegTS')
Loading required package: ROptEstOld
Loading required package: distr
Loading required package: startupmsg
:startupmsg>  Utilities for Start-Up Messages (version 0.9.6)
:startupmsg> 
:startupmsg>  For more information see ?"startupmsg",
:startupmsg>  NEWS("startupmsg")

Loading required package: sfsmisc
:distr>  Object Oriented Implementation of Distributions (version
:distr>  2.8.0)
:distr> 
:distr>  Attention: Arithmetics on distribution objects are
:distr>  understood as operations on corresponding random variables
:distr>  (r.v.s); see distrARITH().
:distr> 
:distr>  Some functions from package 'stats' are intentionally masked
:distr>  ---see distrMASK().
:distr> 
:distr>  Note that global options are controlled by distroptions()
:distr>  ---c.f. ?"distroptions".
:distr> 
:distr>  For more information see ?"distr", NEWS("distr"), as well as
:distr>    http://distr.r-forge.r-project.org/
:distr>  Package "distrDoc" provides a vignette to this package as
:distr>  well as to several extension packages; try
:distr>  vignette("distr").


Attaching package: 'distr'

The following objects are masked from 'package:stats':

    df, qqplot, sd

Loading required package: distrEx
:distrEx>  Extensions of Package 'distr' (version 2.8.0)
:distrEx> 
:distrEx>  Note: Packages "e1071", "moments", "fBasics" should be
:distrEx>  attached /before/ package "distrEx". See
:distrEx>  distrExMASK().Note: Extreme value distribution
:distrEx>  functionality has been moved to
:distrEx> 
:distrEx>        package "RobExtremes". See distrExMOVED().
:distrEx> 
:distrEx>  For more information see ?"distrEx", NEWS("distrEx"), as
:distrEx>  well as
:distrEx>    http://distr.r-forge.r-project.org/
:distrEx>  Package "distrDoc" provides a vignette to this package
:distrEx>  as well as to several related packages; try
:distrEx>  vignette("distr").


Attaching package: 'distrEx'

The following objects are masked from 'package:stats':

    IQR, mad, median, var

Loading required package: RandVar
:RandVar>  Implementation of Random Variables (version 1.2.0)
:RandVar> 
:RandVar>  For more information see ?"RandVar", NEWS("RandVar"), as
:RandVar>  well as
:RandVar>    http://robast.r-forge.r-project.org/
:RandVar>  This package also includes a vignette; try
:RandVar>  vignette("RandVar").

Loading required package: evd

Attaching package: 'ROptEstOld'

The following object is masked from 'package:graphics':

    clip

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Av1CondContIC-class")
> ### * Av1CondContIC-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Av1CondContIC-class
> ### Title: Conditionally centered influence curve of contamination type
> ### Aliases: Av1CondContIC-class CallL2Fam<-,Av1CondContIC-method
> ###   cent,Av1CondContIC-method cent<-,Av1CondContIC-method
> ###   clip,Av1CondContIC-method clip<-,Av1CondContIC-method
> ###   lowerCase,Av1CondContIC-method lowerCase<-,Av1CondContIC-method
> ###   neighborRadius,Av1CondContIC-method
> ###   neighborRadius<-,Av1CondContIC-method stand,Av1CondContIC-method
> ###   stand<-,Av1CondContIC-method
> ###   generateIC,Av1CondContNeighborhood,L2RegTypeFamily-method
> ###   show,Av1CondContIC-method
> ### Keywords: classes robust
> 
> ### ** Examples
> 
> IC1 <- new("Av1CondContIC")
> IC1
An object of class "Av1CondContIC" 
### name:	 conditionally centered IC for average conditional contamination neighborhoods 

### L2-differentiable regression type family:
 L2 differentiable regression type family 
### param:	An object of class "ParamFamParameter" 
name:	 Parameter of L2 differentiable regression type family 
main:	 0 

### neighborhood radius:	 0 

### clip:	[1] Inf
### cent:	An object of class "EuclRandVarList" 
Domain:	Euclidean Space with dimension 2 
[[1]]
length of Map:	 1 
Range:	Real Space with dimension 1 
### stand:
     [,1]
[1,]    1

### Infos:
     method message
> 
> 
> 
> cleanEx()
> nameEx("Av1CondContIC")
> ### * Av1CondContIC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Av1CondContIC
> ### Title: Generating function for Av1CondContIC-class
> ### Aliases: Av1CondContIC
> ### Keywords: robust
> 
> ### ** Examples
> 
> IC1 <- Av1CondContIC()
> IC1
An object of class "Av1CondContIC" 
### name:	 conditionally centered IC for average conditional contamination neighborhoods 

### L2-differentiable regression type family:
 L2 differentiable regression type family 
### param:	An object of class "ParamFamParameter" 
name:	 Parameter of L2 differentiable regression type family 
main:	 0 

### neighborhood radius:	 0 

### clip:	[1] Inf
### cent:	An object of class "EuclRandVarList" 
Domain:	Euclidean Space with dimension 2 
[[1]]
length of Map:	 1 
Range:	Real Space with dimension 1 
### stand:
     [,1]
[1,]    1

### Infos:
     method message
> 
> 
> 
> cleanEx()
> nameEx("Av1CondContNeighborhood-class")
> ### * Av1CondContNeighborhood-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Av1CondContNeighborhood-class
> ### Title: Average conditional contamination neighborhood
> ### Aliases: Av1CondContNeighborhood-class
> ### Keywords: classes models robust
> 
> ### ** Examples
> 
> new("Av1CondContNeighborhood")
An object of class "Av1CondContNeighborhood" 
type:	 average conditional convex contamination neighborhood 
radius:	 0 
> 
> 
> 
> cleanEx()
> nameEx("Av1CondContNeighborhood")
> ### * Av1CondContNeighborhood
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Av1CondContNeighborhood
> ### Title: Generating function for Av1CondContNeighborhood-class
> ### Aliases: Av1CondContNeighborhood
> ### Keywords: models robust
> 
> ### ** Examples
> 
> Av1CondContNeighborhood()
An object of class "Av1CondContNeighborhood" 
type:	 average conditional convex contamination neighborhood 
radius:	 0 
> 
> ## The function is currently defined as
> function(radius = 0, radiusCurve = function(x){1}){ 
+     new("Av1CondContNeighborhood", radius = radius, radiusCurve = radiusCurve) 
+ }
function (radius = 0, radiusCurve = function(x) {
    1
}) 
{
    new("Av1CondContNeighborhood", radius = radius, radiusCurve = radiusCurve)
}
> 
> 
> 
> cleanEx()
> nameEx("Av1CondTotalVarIC-class")
> ### * Av1CondTotalVarIC-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Av1CondTotalVarIC-class
> ### Title: Conditionally centered influence curve of total variaton type
> ### Aliases: Av1CondTotalVarIC-class CallL2Fam<-,Av1CondTotalVarIC-method
> ###   clipLo,Av1CondTotalVarIC-method clipLo<-,Av1CondTotalVarIC-method
> ###   clipUp,Av1CondTotalVarIC-method clipUp<-,Av1CondTotalVarIC-method
> ###   lowerCase,Av1CondTotalVarIC-method
> ###   lowerCase<-,Av1CondTotalVarIC-method
> ###   neighborRadius,Av1CondTotalVarIC-method
> ###   neighborRadius<-,Av1CondTotalVarIC-method
> ###   stand,Av1CondTotalVarIC-method stand<-,Av1CondTotalVarIC-method
> ###   generateIC,Av1CondTotalVarNeighborhood,L2RegTypeFamily-method
> ###   show,Av1CondTotalVarIC-method
> ### Keywords: classes robust
> 
> ### ** Examples
> 
> IC1 <- new("Av1CondTotalVarIC")
> IC1
An object of class "Av1CondTotalVarIC" 
### name:	 conditionally centered IC for average conditional contamination neighborhoods 

### L2-differentiable regression type family:
 L2 differentiable regression type family 
### param:	An object of class "ParamFamParameter" 
name:	 Parameter of L2 differentiable regression type family 
main:	 0 

### neighborhood radius:	 0 

### clipUp:	[1] Inf
### clipLo:	An object of class "RealRandVariable" 
length of Map:	 1 
Domain:	Euclidean Space with dimension 1 
Range:	Real Space with dimension 1 
### stand:
     [,1]
[1,]    1

### Infos:
     method message
> 
> 
> 
> cleanEx()
> nameEx("Av1CondTotalVarIC")
> ### * Av1CondTotalVarIC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Av1CondTotalVarIC
> ### Title: Generating function for Av1CondTotalVarIC-class
> ### Aliases: Av1CondTotalVarIC
> ### Keywords: robust
> 
> ### ** Examples
> 
> IC1 <- Av1CondTotalVarIC()
> IC1
An object of class "Av1CondTotalVarIC" 
### name:	 conditionally centered IC for average conditional total variation neighborhoods 

### L2-differentiable regression type family:
 L2 differentiable regression type family 
### param:	An object of class "ParamFamParameter" 
name:	 Parameter of L2 differentiable regression type family 
main:	 0 

### neighborhood radius:	 0 

### clipUp:	[1] Inf
### clipLo:	An object of class "RealRandVariable" 
length of Map:	 1 
Domain:	Euclidean Space with dimension 1 
Range:	Real Space with dimension 1 
### stand:
     [,1]
[1,]    1

### Infos:
     method message
> 
> 
> 
> cleanEx()
> nameEx("Av1CondTotalVarNeighborhood-class")
> ### * Av1CondTotalVarNeighborhood-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Av1CondTotalVarNeighborhood-class
> ### Title: Average conditional total variation neighborhood
> ### Aliases: Av1CondTotalVarNeighborhood-class
> ### Keywords: classes models robust
> 
> ### ** Examples
> 
> new("Av1CondTotalVarNeighborhood")
An object of class "Av1CondTotalVarNeighborhood" 
type:	 average conditional total variation neighborhood 
radius:	 0 
> 
> 
> 
> cleanEx()
> nameEx("Av1CondTotalVarNeighborhood")
> ### * Av1CondTotalVarNeighborhood
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Av1CondTotalVarNeighborhood
> ### Title: Generating function for Av1CondTotalVarNeighborhood-class
> ### Aliases: Av1CondTotalVarNeighborhood
> ### Keywords: models robust
> 
> ### ** Examples
> 
> Av1CondTotalVarNeighborhood()
An object of class "Av1CondTotalVarNeighborhood" 
type:	 average conditional total variation neighborhood 
radius:	 0 
> 
> ## The function is currently defined as
> function(radius = 0, radiusCurve = function(x){1}){ 
+     new("Av1CondTotalVarNeighborhood", radius = radius, radiusCurve = radiusCurve) 
+ }
function (radius = 0, radiusCurve = function(x) {
    1
}) 
{
    new("Av1CondTotalVarNeighborhood", radius = radius, radiusCurve = radiusCurve)
}
> 
> 
> 
> cleanEx()
> nameEx("Av2CondContIC-class")
> ### * Av2CondContIC-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Av2CondContIC-class
> ### Title: Conditionally centered influence curve of contamination type
> ### Aliases: Av2CondContIC-class CallL2Fam<-,Av2CondContIC-method
> ###   cent,Av2CondContIC-method cent<-,Av2CondContIC-method
> ###   clip,Av2CondContIC-method clip<-,Av2CondContIC-method
> ###   lowerCase,Av2CondContIC-method lowerCase<-,Av2CondContIC-method
> ###   neighborRadius,Av2CondContIC-method
> ###   neighborRadius<-,Av2CondContIC-method stand,Av2CondContIC-method
> ###   stand<-,Av2CondContIC-method
> ###   generateIC,Av2CondContNeighborhood,L2RegTypeFamily-method
> ###   show,Av2CondContIC-method
> ### Keywords: classes robust
> 
> ### ** Examples
> 
> IC1 <- new("Av2CondContIC")
> IC1
An object of class "Av2CondContIC" 
### name:	 conditionally centered IC for average square conditional contamination neighborhoods 

### L2-differentiable regression type family:
 L2 differentiable regression type family 
### param:	An object of class "ParamFamParameter" 
name:	 Parameter of L2 differentiable regression type family 
main:	 0 

### neighborhood radius:	 0 

### clip:	[1] Inf
### cent:	[1] 0
### stand:	[1] 1

### Infos:
     method message
> 
> 
> 
> cleanEx()
> nameEx("Av2CondContIC")
> ### * Av2CondContIC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Av2CondContIC
> ### Title: Generating function for Av2CondContIC-class
> ### Aliases: Av2CondContIC
> ### Keywords: robust
> 
> ### ** Examples
> 
> IC1 <- Av2CondContIC()
> IC1
An object of class "Av2CondContIC" 
### name:	 conditionally centered IC for average square conditional contamination neighborhoods 

### L2-differentiable regression type family:
 L2 differentiable regression type family 
### param:	An object of class "ParamFamParameter" 
name:	 Parameter of L2 differentiable regression type family 
main:	 0 

### neighborhood radius:	 0 

### clip:	[1] Inf
### cent:	[1] 0
### stand:	[1] 1

### Infos:
     method message
> 
> 
> 
> cleanEx()
> nameEx("Av2CondContNeighborhood-class")
> ### * Av2CondContNeighborhood-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Av2CondContNeighborhood-class
> ### Title: Average square conditional contamination neighborhood
> ### Aliases: Av2CondContNeighborhood-class
> ### Keywords: classes models robust
> 
> ### ** Examples
> 
> new("Av2CondContNeighborhood")
An object of class "Av2CondContNeighborhood" 
type:	 average square conditional convex contamination neighborhood 
radius:	 0 
> 
> 
> 
> cleanEx()
> nameEx("Av2CondContNeighborhood")
> ### * Av2CondContNeighborhood
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Av2CondContNeighborhood
> ### Title: Generating function for Av2CondContNeighborhood-class
> ### Aliases: Av2CondContNeighborhood
> ### Keywords: models robust
> 
> ### ** Examples
> 
> Av2CondContNeighborhood()
An object of class "Av2CondContNeighborhood" 
type:	 average square conditional convex contamination neighborhood 
radius:	 0 
> 
> ## The function is currently defined as
> function(radius = 0, radiusCurve = function(x){1}){ 
+     new("Av2CondContNeighborhood", radius = radius, radiusCurve = radiusCurve) 
+ }
function (radius = 0, radiusCurve = function(x) {
    1
}) 
{
    new("Av2CondContNeighborhood", radius = radius, radiusCurve = radiusCurve)
}
> 
> 
> 
> cleanEx()
> nameEx("CondContIC-class")
> ### * CondContIC-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CondContIC-class
> ### Title: Conditionally centered influence curve of contamination type
> ### Aliases: CondContIC-class CallL2Fam<-,CondContIC-method
> ###   cent,CondContIC-method cent<-,CondContIC-method
> ###   clip,CondContIC-method clip<-,CondContIC-method
> ###   lowerCase,CondContIC-method lowerCase<-,CondContIC-method
> ###   neighborRadius,CondContIC-method neighborRadius<-,CondContIC-method
> ###   neighborRadiusCurve neighborRadiusCurve,CondContIC-method
> ###   neighborRadiusCurve<- neighborRadiusCurve<-,CondContIC-method
> ###   stand,CondContIC-method stand<-,CondContIC-method
> ###   generateIC,CondContNeighborhood,L2RegTypeFamily-method
> ###   show,CondContIC-method
> ### Keywords: classes robust
> 
> ### ** Examples
> 
> IC1 <- new("CondContIC")
> IC1
An object of class "CondContIC" 
### name:	 conditionally centered IC for average conditional contamination neighborhoods 

### L2-differentiable regression type family:
 L2 differentiable regression type family 
### param:	An object of class "ParamFamParameter" 
name:	 Parameter of L2 differentiable regression type family 
main:	 0 

### neighborhood radius:	 0 

### clip:	An object of class "RealRandVariable" 
length of Map:	 1 
Domain:	Euclidean Space with dimension 1 
Range:	Real Space with dimension 1 
### cent:	An object of class "EuclRandVarList" 
Domain:	Euclidean Space with dimension 2 
[[1]]
length of Map:	 1 
Range:	Real Space with dimension 1 
### stand:
     [,1]
[1,]    1

### Infos:
     method message
> 
> 
> 
> cleanEx()
> nameEx("CondContIC")
> ### * CondContIC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CondContIC
> ### Title: Generating function for CondContIC-class
> ### Aliases: CondContIC
> ### Keywords: robust
> 
> ### ** Examples
> 
> IC1 <- CondContIC()
> IC1
An object of class "CondContIC" 
### name:	 conditionally centered IC for average conditional contamination neighborhoods 

### L2-differentiable regression type family:
 L2 differentiable regression type family 
### param:	An object of class "ParamFamParameter" 
name:	 Parameter of L2 differentiable regression type family 
main:	 0 

### neighborhood radius:	 0 

### clip:	An object of class "RealRandVariable" 
length of Map:	 1 
Domain:	Real Space with dimension 1 
Range:	Real Space with dimension 1 
### cent:	An object of class "EuclRandVarList" 
Domain:	Euclidean Space with dimension 2 
[[1]]
length of Map:	 1 
Range:	Real Space with dimension 1 
### stand:
     [,1]
[1,]    1

### Infos:
     method message
> 
> 
> 
> cleanEx()
> nameEx("CondContNeighborhood-class")
> ### * CondContNeighborhood-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CondContNeighborhood-class
> ### Title: Conditional contamination neighborhood
> ### Aliases: CondContNeighborhood-class
> ### Keywords: classes models robust
> 
> ### ** Examples
> 
> new("CondContNeighborhood")
An object of class "CondContNeighborhood" 
type:	 conditional convex contamination neighborhood 
radius:	 0 
> 
> 
> 
> cleanEx()
> nameEx("CondContNeighborhood")
> ### * CondContNeighborhood
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CondContNeighborhood
> ### Title: Generating function for CondContNeighborhood-class
> ### Aliases: CondContNeighborhood
> ### Keywords: models robust
> 
> ### ** Examples
> 
> CondContNeighborhood()
An object of class "CondContNeighborhood" 
type:	 conditional convex contamination neighborhood 
radius:	 0 
> 
> ## The function is currently defined as
> function(radius = 0, radiusCurve = function(x){1}){ 
+     new("CondContNeighborhood", radius = radius, radiusCurve = radiusCurve) 
+ }
function (radius = 0, radiusCurve = function(x) {
    1
}) 
{
    new("CondContNeighborhood", radius = radius, radiusCurve = radiusCurve)
}
> 
> 
> 
> cleanEx()
> nameEx("CondIC-class")
> ### * CondIC-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CondIC-class
> ### Title: Conditionally centered partial influence curve
> ### Aliases: CondIC-class CallL2Fam<-,CondIC-method
> ###   checkIC,CondIC,missing-method checkIC,CondIC,L2RegTypeFamily-method
> ###   show,CondIC-method
> ### Keywords: classes robust
> 
> ### ** Examples
> 
> new("CondIC")
An object of class "CondIC" 
### name:	 square integrable, conditionally centered (partial) IC 
### L2-differentiable parametric family:	 L2 differentiable regression type family 

### 'Curve':	An object of class "EuclRandVarList" 
Domain:	Euclidean Space with dimension 2 
[[1]]
length of Map:	 1 
Range:	Real Space with dimension 1 

### Infos:
     method message
> 
> 
> 
> cleanEx()
> nameEx("CondIC")
> ### * CondIC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CondIC
> ### Title: Generating function for CondIC-class
> ### Aliases: CondIC
> ### Keywords: robust
> 
> ### ** Examples
> 
> CondIC()
An object of class "CondIC" 
### name:	 Influence curve for a L_2 differentiable regression type family 
### L2-differentiable parametric family:	 L2 differentiable regression type family 

### 'Curve':	An object of class "EuclRandVarList" 
Domain:	Euclidean Space with dimension 2 
[[1]]
length of Map:	 1 
Range:	Real Space with dimension 1 

### Infos:
     method message
> 
> ## The function is currently defined as
> function(name, Curve = EuclRandVariable(Map = list(function(x){x[1]*x[2]}),
+                              Domain = EuclideanSpace(dimension = 2)),
+          Risks, Infos, CallL2Fam = call("L2RegTypeFamily")){
+     if(missing(name))
+         name <- "Influence curve for a L_2 differentiable regression type family"
+     if(missing(Risks))
+         Risks <- list()
+     if(missing(Infos))
+         Infos <- matrix(c(character(0),character(0)), ncol=2,
+                      dimnames=list(character(0), c("method", "message")))
+     return(new("CondIC", name = name, Curve = Curve, Risks = Risks,
+                Infos = Infos, CallL2Fam = CallL2Fam))
+   }
function (name, Curve = EuclRandVariable(Map = list(function(x) {
    x[1] * x[2]
}), Domain = EuclideanSpace(dimension = 2)), Risks, Infos, CallL2Fam = call("L2RegTypeFamily")) 
{
    if (missing(name)) 
        name <- "Influence curve for a L_2 differentiable regression type family"
    if (missing(Risks)) 
        Risks <- list()
    if (missing(Infos)) 
        Infos <- matrix(c(character(0), character(0)), ncol = 2, 
            dimnames = list(character(0), c("method", "message")))
    return(new("CondIC", name = name, Curve = Curve, Risks = Risks, 
        Infos = Infos, CallL2Fam = CallL2Fam))
}
> 
> 
> 
> cleanEx()
> nameEx("CondTotalVarIC-class")
> ### * CondTotalVarIC-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CondTotalVarIC-class
> ### Title: Conditionally centered influence curve of total variaton type
> ### Aliases: CondTotalVarIC-class CallL2Fam<-,CondTotalVarIC-method
> ###   clipLo,CondTotalVarIC-method clipLo<-,CondTotalVarIC-method
> ###   clipUp,CondTotalVarIC-method clipUp<-,CondTotalVarIC-method
> ###   lowerCase,CondTotalVarIC-method lowerCase<-,CondTotalVarIC-method
> ###   neighborRadius,CondTotalVarIC-method
> ###   neighborRadius<-,CondTotalVarIC-method
> ###   neighborRadiusCurve,CondTotalVarIC-method
> ###   neighborRadiusCurve<-,CondTotalVarIC-method
> ###   stand,CondTotalVarIC-method stand<-,CondTotalVarIC-method
> ###   generateIC,CondTotalVarNeighborhood,L2RegTypeFamily-method
> ###   show,CondTotalVarIC-method
> ### Keywords: classes robust
> 
> ### ** Examples
> 
> IC1 <- new("CondTotalVarIC")
> IC1
An object of class "CondTotalVarIC" 
### name:	 conditionally centered IC for average conditional contamination neighborhoods 

### L2-differentiable regression type family:
 L2 differentiable regression type family 
### param:	An object of class "ParamFamParameter" 
name:	 Parameter of L2 differentiable regression type family 
main:	 0 

### neighborhood radius:	 0 

### clipUp:	An object of class "RealRandVariable" 
length of Map:	 1 
Domain:	Euclidean Space with dimension 1 
Range:	Real Space with dimension 1 
### clipLo:	An object of class "RealRandVariable" 
length of Map:	 1 
Domain:	Euclidean Space with dimension 1 
Range:	Real Space with dimension 1 
### stand:
     [,1]
[1,]    1

### Infos:
     method message
> 
> 
> 
> cleanEx()
> nameEx("CondTotalVarIC")
> ### * CondTotalVarIC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CondTotalVarIC
> ### Title: Generating function for CondTotalVarIC-class
> ### Aliases: CondTotalVarIC
> ### Keywords: robust
> 
> ### ** Examples
> 
> IC1 <- CondTotalVarIC()
> IC1
An object of class "CondTotalVarIC" 
### name:	 conditionally centered IC for average conditional total variation neighborhoods 

### L2-differentiable regression type family:
 L2 differentiable regression type family 
### param:	An object of class "ParamFamParameter" 
name:	 Parameter of L2 differentiable regression type family 
main:	 0 

### neighborhood radius:	 0 

### clipUp:	An object of class "RealRandVariable" 
length of Map:	 1 
Domain:	Real Space with dimension 1 
Range:	Real Space with dimension 1 
### clipLo:	An object of class "RealRandVariable" 
length of Map:	 1 
Domain:	Real Space with dimension 1 
Range:	Real Space with dimension 1 
### stand:
     [,1]
[1,]    1

### Infos:
     method message
> 
> 
> 
> cleanEx()
> nameEx("CondTotalVarNeighborhood-class")
> ### * CondTotalVarNeighborhood-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CondTotalVarNeighborhood-class
> ### Title: Conditional total variation neighborhood
> ### Aliases: CondTotalVarNeighborhood-class
> ### Keywords: classes models robust
> 
> ### ** Examples
> 
> new("CondTotalVarNeighborhood")
An object of class "CondTotalVarNeighborhood" 
type:	 conditional total variation neighborhood 
radius:	 0 
> 
> 
> 
> cleanEx()
> nameEx("CondTotalVarNeighborhood")
> ### * CondTotalVarNeighborhood
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CondTotalVarNeighborhood
> ### Title: Generating function for CondContNeighborhood-class
> ### Aliases: CondTotalVarNeighborhood
> ### Keywords: models robust
> 
> ### ** Examples
> 
> CondTotalVarNeighborhood()
An object of class "CondTotalVarNeighborhood" 
type:	 conditional total variation neighborhood 
radius:	 0 
> 
> ## The function is currently defined as
> function(radius = 0, radiusCurve = function(x){1}){ 
+     new("CondTotalVarNeighborhood", radius = radius, radiusCurve = radiusCurve) 
+ }
function (radius = 0, radiusCurve = function(x) {
    1
}) 
{
    new("CondTotalVarNeighborhood", radius = radius, radiusCurve = radiusCurve)
}
> 
> 
> 
> cleanEx()
> nameEx("FixRobRegTypeModel-class")
> ### * FixRobRegTypeModel-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: FixRobRegTypeModel-class
> ### Title: Robust regression-type model with fixed neighborhood
> ### Aliases: FixRobRegTypeModel-class neighbor<-,FixRobRegTypeModel-method
> ###   show,FixRobRegTypeModel-method
> ### Keywords: classes models robust
> 
> ### ** Examples
> 
> new("FixRobRegTypeModel")
An object of class "FixRobRegTypeModel" 
###### center:	An object of class "RegTypeFamily" 
### name:	 regression type family 

### ErrorDistr:	Distribution Object of Class: Norm
 mean: 0
 sd: 1

### RegDistr:	Distribution Object of Class: Norm
 mean: 0
 sd: 1

### param:	An object of class "ParamFamParameter" 
name:	 parameter of a parametric family of probability measures 
main:	 0 

###### neighborhood:	An object of class "ContNeighborhood" 
type:	 (uncond.) convex contamination neighborhood 
radius:	 0 
> 
> 
> 
> cleanEx()
> nameEx("FixRobRegTypeModel")
> ### * FixRobRegTypeModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: FixRobRegTypeModel
> ### Title: Generating function for FixRobRegTypeModel-class
> ### Aliases: FixRobRegTypeModel
> ### Keywords: models robust
> 
> ### ** Examples
> 
> FixRobRegTypeModel()
An object of class "FixRobRegTypeModel" 
###### center:	An object of class "RegTypeFamily" 
### name:	 regression type family 

### ErrorDistr:	Distribution Object of Class: Norm
 mean: 0
 sd: 1

### RegDistr:	Distribution Object of Class: Norm
 mean: 0
 sd: 1

### param:	An object of class "ParamFamParameter" 
name:	 parameter of regression type family 
main:	 0 

###### neighborhood:	An object of class "ContNeighborhood" 
type:	 (uncond.) convex contamination neighborhood 
radius:	 0 
> 
> ## The function is currently defined as
> function(center = RegTypeFamily(), neighbor = ContNeighborhood()){
+     new("FixRobRegTypeModel", center = center, neighbor = neighbor)
+ }
function (center = RegTypeFamily(), neighbor = ContNeighborhood()) 
{
    new("FixRobRegTypeModel", center = center, neighbor = neighbor)
}
> 
> 
> 
> cleanEx()
> nameEx("InfRobRegTypeModel-class")
> ### * InfRobRegTypeModel-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: InfRobRegTypeModel-class
> ### Title: Robust regression-type model with infinitesimal neighborhood
> ### Aliases: InfRobRegTypeModel-class neighbor<-,InfRobRegTypeModel-method
> ###   show,InfRobRegTypeModel-method
> ### Keywords: classes models robust
> 
> ### ** Examples
> 
> new("InfRobRegTypeModel")
An object of class "InfRobRegTypeModel" 
###### center:	An object of class "L2RegTypeFamily" 
### name:	 L2 differentiable regression type family 

### ErrorDistr:	Distribution Object of Class: Norm
 mean: 0
 sd: 1

### RegDistr:	Distribution Object of Class: Norm
 mean: 0
 sd: 1

### param:	An object of class "ParamFamParameter" 
name:	 parameter of a parametric family of probability measures 
main:	 0 

###### neighborhood:	An object of class "ContNeighborhood" 
type:	 (uncond.) convex contamination neighborhood 
radius:	 0 
> 
> 
> 
> cleanEx()
> nameEx("InfRobRegTypeModel")
> ### * InfRobRegTypeModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: InfRobRegTypeModel
> ### Title: Generating function for InfRobRegTypeModel-class
> ### Aliases: InfRobRegTypeModel
> ### Keywords: models robust
> 
> ### ** Examples
> 
> InfRobRegTypeModel()
An object of class "InfRobRegTypeModel" 
###### center:	An object of class "L2RegTypeFamily" 
### name:	 L2 differentiable regression type family 

### ErrorDistr:	Distribution Object of Class: Norm
 mean: 0
 sd: 1

### RegDistr:	Distribution Object of Class: Norm
 mean: 0
 sd: 1

### param:	An object of class "ParamFamParameter" 
name:	 Parameter of L2 differentiable regression type family 
main:	 0 

###### neighborhood:	An object of class "ContNeighborhood" 
type:	 (uncond.) convex contamination neighborhood 
radius:	 0 
> 
> ## The function is currently defined as
> function(center = L2RegTypeFamily(), neighbor = ContNeighborhood()) {
+     new("InfRobRegTypeModel", center = center, neighbor = neighbor)
+ }
function (center = L2RegTypeFamily(), neighbor = ContNeighborhood()) 
{
    new("InfRobRegTypeModel", center = center, neighbor = neighbor)
}
> 
> 
> 
> cleanEx()
> nameEx("L2RegTypeFamily-class")
> ### * L2RegTypeFamily-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: L2RegTypeFamily-class
> ### Title: L2 differentiable parametric regression-type family
> ### Aliases: L2RegTypeFamily-class ErrorL2deriv
> ###   ErrorL2deriv,L2RegTypeFamily-method ErrorL2derivDistr
> ###   ErrorL2derivDistr,L2RegTypeFamily-method ErrorL2derivSymm
> ###   ErrorL2derivSymm,L2RegTypeFamily-method ErrorL2derivDistrSymm
> ###   ErrorL2derivDistrSymm,L2RegTypeFamily-method
> ###   FisherInfo,L2RegTypeFamily-method L2deriv,L2RegTypeFamily-method
> ###   checkL2deriv,L2RegTypeFamily-method checkIC,IC,missing-method
> ###   checkIC,IC,L2RegTypeFamily-method
> ###   E,L2RegTypeFamily,EuclRandVariable,missing-method
> ###   E,L2RegTypeFamily,EuclRandMatrix,missing-method
> ###   E,L2RegTypeFamily,EuclRandVarList,missing-method
> ###   show,L2RegTypeFamily-method
> ### Keywords: classes models robust
> 
> ### ** Examples
> 
> new("L2RegTypeFamily")
An object of class "L2RegTypeFamily" 
### name:	 L2 differentiable regression type family 

### ErrorDistr:	Distribution Object of Class: Norm
 mean: 0
 sd: 1

### RegDistr:	Distribution Object of Class: Norm
 mean: 0
 sd: 1

### param:	An object of class "ParamFamParameter" 
name:	 parameter of a parametric family of probability measures 
main:	 0 
> 
> 
> 
> cleanEx()
> nameEx("L2RegTypeFamily")
> ### * L2RegTypeFamily
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: L2RegTypeFamily
> ### Title: Generating function for L2RegTypeFamily-class
> ### Aliases: L2RegTypeFamily
> ### Keywords: models robust
> 
> ### ** Examples
> 
> L2RegTypeFamily()
An object of class "L2RegTypeFamily" 
### name:	 L2 differentiable regression type family 

### ErrorDistr:	Distribution Object of Class: Norm
 mean: 0
 sd: 1

### RegDistr:	Distribution Object of Class: Norm
 mean: 0
 sd: 1

### param:	An object of class "ParamFamParameter" 
name:	 Parameter of L2 differentiable regression type family 
main:	 0 
> 
> 
> 
> cleanEx()
> nameEx("NormLinRegFamily")
> ### * NormLinRegFamily
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: NormLinRegFamily
> ### Title: Generating function for linear regression family
> ### Aliases: NormLinRegFamily
> ### Keywords: models robust
> 
> ### ** Examples
> 
> (LM1 <- NormLinRegFamily(Reg2Mom = matrix(1)))
An object of class "L2RegTypeFamily" 
### name:	 L2 differentiable linear regression family 

### ErrorDistr:	Distribution Object of Class: Norm
 mean: 0
 sd: 1

### RegDistr:	Distribution Object of Class: Norm
 mean: 0
 sd: 1

### param:	An object of class "ParamFamParameter" 
name:	 Parameter of L2 differentiable linear regression family 
main:	 0 

### props:
[1] "The linear regression family is invariant under"           
[2] "the group of transformations 'g(x,y) = (x, t(x)theta + y)'"
[3] "with regression parameter 'theta'"                         
> Map(L2deriv(LM1)[[1]])
[[1]]
function (x) 
{
    as.vector(x[1:1L] * (x[1L + 1] - x[1:1L] %*% 0))
}
<environment: 0x0b966fc8>

> FisherInfo(LM1)
An object of class "PosDefSymmMatrix"
     [,1]
[1,]    1
> checkL2deriv(LM1)
precision of centering:	 0 
precision of Fisher information:
              [,1]
[1,] -1.158797e-05
maximum deviation 
     1.158797e-05 
> 
> 
> 
> cleanEx()
> nameEx("NormLinRegInterceptFamily")
> ### * NormLinRegInterceptFamily
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: NormLinRegInterceptFamily
> ### Title: Generating Function for Linear Regression Family with Unknown
> ###   Intercept
> ### Aliases: NormLinRegInterceptFamily
> ### Keywords: models robust
> 
> ### ** Examples
> 
> (LM1 <- NormLinRegInterceptFamily(Reg2Mom = matrix(1)))
An object of class "L2RegTypeFamily" 
### name:	 L2 differentiable linear regression family with unknown intercept 

### ErrorDistr:	Distribution Object of Class: Norm
 mean: 0
 sd: 1

### RegDistr:	Distribution Object of Class: Norm
 mean: 0
 sd: 1

### param:	An object of class "ParamFamParameter" 
name:	 Parameter of L2 differentiable linear regression family with unknown intercept 
main:	 0 0 

### props:
[1] "The linear regression family with unknown intercept is invariant"            
[2] "under the group of transformations 'g(x,y) = (x, intercept + t(x)theta + y)'"
[3] "with regression parameter 'theta' and intercept parameter 'intercept'"       
> Map(L2deriv(LM1)[[1]])
[[1]]
function (x) 
{
    as.vector(x[1:1L] * (x[1L + 1] - x[1:1L] %*% 0 - 0))
}
<environment: 0x0c183578>

> FisherInfo(LM1)
An object of class "PosDefSymmMatrix"
     [,1] [,2]
[1,]    1    0
[2,]    0    1
> checkL2deriv(LM1)
precision of centering:	 0 0 
precision of Fisher information:
              [,1]       [,2]
[1,] -1.158797e-05  0.000e+00
[2,]  0.000000e+00 -5.994e-06
maximum deviation 
     1.158797e-05 
> 
> 
> 
> cleanEx()
> nameEx("NormLinRegScaleFamily")
> ### * NormLinRegScaleFamily
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: NormLinRegScaleFamily
> ### Title: Generating Function for Linear Regression Family with Unknown
> ###   Scale
> ### Aliases: NormLinRegScaleFamily
> ### Keywords: models robust
> 
> ### ** Examples
> 
> (LM1 <- NormLinRegScaleFamily(Reg2Mom = matrix(1)))
An object of class "L2RegTypeFamily" 
### name:	 L2 differentiable linear regression family with unknown scale 

### ErrorDistr:	Distribution Object of Class: Norm
 mean: 0
 sd: 1

### RegDistr:	Distribution Object of Class: Norm
 mean: 0
 sd: 1

### param:	An object of class "ParamFamParameter" 
name:	 Parameter of L2 differentiable linear regression family with unknown scale 
main:	 0 1 

### props:
[1] "The linear regression family with unknown scale is invariant"          
[2] "under the group of transformations 'g(x,y) = (x, t(x)theta + scale y)'"
[3] "with regression parameter 'theta' and scale parameter 'scale'"         
> Map(L2deriv(LM1)[[1]])
[[1]]
function (x) 
{
    as.vector(x[1:1L] * (x[1L + 1] - x[1:1L] %*% 0)/1^2)
}
<environment: 0x0d7f1a00>

> FisherInfo(LM1)
An object of class "PosDefSymmMatrix"
     [,1] [,2]
[1,]    1    0
[2,]    0    2
> checkL2deriv(LM1)
precision of centering:	 0 -5.594e-06 
precision of Fisher information:
              [,1]          [,2]
[1,] -1.158797e-05  0.0000000000
[2,]  0.000000e+00 -0.0001576172
maximum deviation 
     0.0001576172 
> 
> 
> 
> cleanEx()
> nameEx("RegTypeFamily-class")
> ### * RegTypeFamily-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RegTypeFamily-class
> ### Title: Parametric regression-type family
> ### Aliases: RegTypeFamily-class ErrorDistr ErrorDistr,RegTypeFamily-method
> ###   ErrorSymm ErrorSymm,RegTypeFamily-method RegDistr
> ###   RegDistr,RegTypeFamily-method Regressor
> ###   Regressor,RegTypeFamily-method RegSymm RegSymm,RegTypeFamily-method
> ###   show,RegTypeFamily-method
> ### Keywords: classes models robust
> 
> ### ** Examples
> 
> new("RegTypeFamily")
An object of class "RegTypeFamily" 
### name:	 regression type family 

### ErrorDistr:	Distribution Object of Class: Norm
 mean: 0
 sd: 1

### RegDistr:	Distribution Object of Class: Norm
 mean: 0
 sd: 1

### param:	An object of class "ParamFamParameter" 
name:	 parameter of a parametric family of probability measures 
main:	 0 
> 
> 
> 
> cleanEx()
> nameEx("RegTypeFamily")
> ### * RegTypeFamily
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RegTypeFamily
> ### Title: Generating function for RegTypeFamily-class
> ### Aliases: RegTypeFamily
> ### Keywords: models robust
> 
> ### ** Examples
> 
> RegTypeFamily()
An object of class "RegTypeFamily" 
### name:	 regression type family 

### ErrorDistr:	Distribution Object of Class: Norm
 mean: 0
 sd: 1

### RegDistr:	Distribution Object of Class: Norm
 mean: 0
 sd: 1

### param:	An object of class "ParamFamParameter" 
name:	 parameter of regression type family 
main:	 0 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  19.59 0.83 39.86 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
