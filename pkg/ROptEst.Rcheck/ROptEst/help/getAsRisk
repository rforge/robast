getAsRisk              package:ROptEst              R Documentation

_G_e_n_e_r_i_c _F_u_n_c_t_i_o_n _f_o_r _C_o_m_p_u_t_a_t_i_o_n _o_f _A_s_y_m_p_t_o_t_i_c _R_i_s_k_s

_D_e_s_c_r_i_p_t_i_o_n:

     Generic function for the computation of asymptotic risks. This
     function is rarely called directly. It is used by  other
     functions.

_U_s_a_g_e:

     getAsRisk(risk, L2deriv, neighbor, biastype, ...)

     ## S4 method for signature 'asMSE, UnivariateDistribution,
     ##   Neighborhood, BiasType':
     getAsRisk(risk, L2deriv, neighbor, biastype, clip, cent, stand, trafo)

     ## S4 method for signature 'asMSE, EuclRandVariable,
     ##   Neighborhood, BiasType':
     getAsRisk(risk, L2deriv, neighbor, biastype, clip, cent, stand, trafo)

     ## S4 method for signature 'asBias, UnivariateDistribution,
     ##   ContNeighborhood, BiasType':
     getAsRisk(risk, L2deriv, neighbor, biastype, trafo)

     ## S4 method for signature 'asBias, UnivariateDistribution,
     ##   TotalVarNeighborhood, BiasType':
     getAsRisk(risk, L2deriv, neighbor, biastype, trafo)

     ## S4 method for signature 'asBias, RealRandVariable,
     ##   ContNeighborhood, BiasType':
     getAsRisk(risk, L2deriv, neighbor, biastype, Distr, L2derivDistrSymm, trafo, 
                  z.start, A.start, maxiter, tol)

     ## S4 method for signature 'asCov, UnivariateDistribution,
     ##   ContNeighborhood, BiasType':
     getAsRisk(risk, L2deriv, neighbor, biastype, clip, cent, stand)

     ## S4 method for signature 'asCov, UnivariateDistribution,
     ##   TotalVarNeighborhood, BiasType':
     getAsRisk(risk, L2deriv, neighbor, biastype, clip, cent, stand)

     ## S4 method for signature 'asCov, RealRandVariable,
     ##   ContNeighborhood, BiasType':
     getAsRisk(risk, L2deriv, neighbor, biastype, Distr, clip, cent, stand)

     ## S4 method for signature 'trAsCov,
     ##   UnivariateDistribution, UncondNeighborhood, BiasType':
     getAsRisk(risk, L2deriv, neighbor, biastype, clip, cent, stand)

     ## S4 method for signature 'trAsCov, RealRandVariable,
     ##   ContNeighborhood, BiasType':
     getAsRisk(risk, L2deriv, neighbor, biastype, Distr, clip, cent, stand)

     ## S4 method for signature 'asUnOvShoot,
     ##   UnivariateDistribution, UncondNeighborhood, BiasType':
     getAsRisk(risk, L2deriv, neighbor, biastype, clip, cent, stand, trafo)

     ## S4 method for signature 'asSemivar,
     ##   UnivariateDistribution, Neighborhood, onesidedBias':
     getAsRisk(risk, L2deriv, neighbor, biastype, 
         clip, cent, stand, trafo)

_A_r_g_u_m_e_n_t_s:

    risk: object of class '"asRisk"'. 

 L2deriv: L2-derivative of some L2-differentiable family of probability
          distributions. 

neighbor: object of class '"Neighborhood"'. 

biastype: object of class '"BiasType"'. 

     ...: additional parameters. 

    clip: optimal clipping bound. 

    cent: optimal centering constant. 

   stand: standardizing matrix. 

   trafo: matrix: transformation of the parameter. 

   Distr: object of class '"Distribution"'. 

L2derivDistrSymm: object of class '"DistrSymmList"'. 

 z.start: initial value for the centering constant. 

 A.start: initial value for the standardizing matrix. 

 maxiter: the maximum number of iterations 

     tol: the desired accuracy (convergence tolerance).

_V_a_l_u_e:

     The asymptotic risk is computed.

_M_e_t_h_o_d_s:

     _r_i_s_k = "_a_s_M_S_E", _L_2_d_e_r_i_v = "_U_n_i_v_a_r_i_a_t_e_D_i_s_t_r_i_b_u_t_i_o_n", _n_e_i_g_h_b_o_r = "_N_e_i_g_h_b_o_r_h_o_o_d", _b_i_a_s_t_y_p_e = "_B_i_a_s_T_y_p_e": 
          computes asymptotic mean square error in methods for function
          'getInfRobIC'. 

     _r_i_s_k = "_a_s_M_S_E", _L_2_d_e_r_i_v = "_E_u_c_l_R_a_n_d_V_a_r_i_a_b_l_e", _n_e_i_g_h_b_o_r = "_N_e_i_g_h_b_o_r_h_o_o_d", _b_i_a_s_t_y_p_e = "_B_i_a_s_T_y_p_e": 
          computes asymptotic mean square error in methods for function
          'getInfRobIC'. 

     _r_i_s_k = "_a_s_B_i_a_s", _L_2_d_e_r_i_v = "_U_n_i_v_a_r_i_a_t_e_D_i_s_t_r_i_b_u_t_i_o_n", _n_e_i_g_h_b_o_r = "_C_o_n_t_N_e_i_g_h_b_o_r_h_o_o_d", _b_i_a_s_t_y_p_e = "_B_i_a_s_T_y_p_e": 
          computes standardized asymptotic bias in methods for function
          'getInfRobIC'. 

     _r_i_s_k = "_a_s_B_i_a_s", _L_2_d_e_r_i_v = "_U_n_i_v_a_r_i_a_t_e_D_i_s_t_r_i_b_u_t_i_o_n", _n_e_i_g_h_b_o_r = "_T_o_t_a_l_V_a_r_N_e_i_g_h_b_o_r_h_o_o_d", _b_i_a_s_t_y_p_e = "_B_i_a_s_T_y_p_e": 
          computes standardized asymptotic bias in methods for function
          'getInfRobIC'. 

     _r_i_s_k = "_a_s_B_i_a_s", _L_2_d_e_r_i_v = "_R_e_a_l_R_a_n_d_V_a_r_i_a_b_l_e", _n_e_i_g_h_b_o_r = "_C_o_n_t_N_e_i_g_h_b_o_r_h_o_o_d", _b_i_a_s_t_y_p_e = "_B_i_a_s_T_y_p_e": 
          computes standardized asymptotic bias in methods for function
          'getInfRobIC'. 

     _r_i_s_k = "_a_s_C_o_v", _L_2_d_e_r_i_v = "_U_n_i_v_a_r_i_a_t_e_D_i_s_t_r_i_b_u_t_i_o_n", _n_e_i_g_h_b_o_r = "_C_o_n_t_N_e_i_g_h_b_o_r_h_o_o_d", _b_i_a_s_t_y_p_e = "_B_i_a_s_T_y_p_e": 
          computes asymptotic covariance in methods for function
          'getInfRobIC'. 

     _r_i_s_k = "_a_s_C_o_v", _L_2_d_e_r_i_v = "_U_n_i_v_a_r_i_a_t_e_D_i_s_t_r_i_b_u_t_i_o_n", _n_e_i_g_h_b_o_r = "_T_o_t_a_l_V_a_r_N_e_i_g_h_b_o_r_h_o_o_d", _b_i_a_s_t_y_p_e = "_B_i_a_s_T_y_p_e": 
          computes asymptotic covariance in methods for function
          'getInfRobIC'. 

     _r_i_s_k = "_a_s_C_o_v", _L_2_d_e_r_i_v = "_R_e_a_l_R_a_n_d_V_a_r_i_a_b_l_e", _n_e_i_g_h_b_o_r = "_C_o_n_t_N_e_i_g_h_b_o_r_h_o_o_d", _b_i_a_s_t_y_p_e = "_B_i_a_s_T_y_p_e": 
          computes asymptotic covariance in methods for function
          'getInfRobIC'. 

     _r_i_s_k = "_t_r_A_s_C_o_v", _L_2_d_e_r_i_v = "_U_n_i_v_a_r_i_a_t_e_D_i_s_t_r_i_b_u_t_i_o_n", _n_e_i_g_h_b_o_r = "_U_n_c_o_n_d_N_e_i_g_h_b_o_r_h_o_o_d", _b_i_a_s_t_y_p_e = "_B_i_a_s_T_y_p_e": 
          computes trace of asymptotic covariance in methods  for
          function 'getInfRobIC'. 

     _r_i_s_k = "_t_r_A_s_C_o_v", _L_2_d_e_r_i_v = "_R_e_a_l_R_a_n_d_V_a_r_i_a_b_l_e", _n_e_i_g_h_b_o_r = "_C_o_n_t_N_e_i_g_h_b_o_r_h_o_o_d", _b_i_a_s_t_y_p_e = "_B_i_a_s_T_y_p_e": 
          computes trace of asymptotic covariance in methods for 
          function 'getInfRobIC'. 

     _r_i_s_k = "_a_s_U_n_O_v_S_h_o_o_t", _L_2_d_e_r_i_v = "_U_n_i_v_a_r_i_a_t_e_D_i_s_t_r_i_b_u_t_i_o_n", _n_e_i_g_h_b_o_r = "_U_n_c_o_n_d_N_e_i_g_h_b_o_r_h_o_o_d", _b_i_a_s_t_y_p_e = "_B_i_a_s_T_y_p_e": 
          computes asymptotic under-/overshoot risk in methods for 
          function 'getInfRobIC'. 

     _r_i_s_k = "_a_s_S_e_m_i_v_a_r", _L_2_d_e_r_i_v = "_U_n_i_v_a_r_i_a_t_e_D_i_s_t_r_i_b_u_t_i_o_n", _n_e_i_g_h_b_o_r = "_N_e_i_g_h_b_o_r_h_o_o_d", _b_i_a_s_t_y_p_e = "_o_n_e_s_i_d_e_d_B_i_a_s": 
          computes asymptotic semivariance in methods for function
          'getInfRobIC'. 

_A_u_t_h_o_r(_s):

     Matthias Kohl Matthias.Kohl@stamats.de

_R_e_f_e_r_e_n_c_e_s:

     Rieder, H. (1994) _Robust Asymptotic Statistics_. New York:
     Springer.

     Ruckdeschel, P. and Rieder, H. (2004) Optimal Influence Curves for
     General Loss Functions. Statistics & Decisions (submitted).

     Kohl, M. (2005) _Numerical Contributions to the Asymptotic Theory
     of Robustness_.  Bayreuth: Dissertation.

_S_e_e _A_l_s_o:

     'asRisk-class'

