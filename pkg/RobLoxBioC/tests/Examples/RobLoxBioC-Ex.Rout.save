
R version 2.14.2 RC (2012-02-25 r58490)
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "RobLoxBioC"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('RobLoxBioC')
Loading required package: Biobase

Welcome to Bioconductor

  Vignettes contain introductory material. To view, type
  'browseVignettes()'. To cite Bioconductor, see
  'citation("Biobase")' and for packages 'citation("pkgname")'.

Loading required package: affy
Loading required package: beadarray
Loading required package: ggplot2
Welcome to beadarray version 2.4.1
beadarray versions >= 2.0.0 are substantial updates from beadarray 1.16.0 and earlier. Please see package vignette for details
Loading required package: distr
Loading required package: startupmsg
:startupmsg>  Utilities for start-up messages (version 0.7.3)
:startupmsg> 
:startupmsg>  For more information see ?"startupmsg",
:startupmsg>  NEWS("startupmsg")

Loading required package: sfsmisc
Loading required package: SweaveListingUtils
:SweaveListingUtils>  Utilities for Sweave together with
:SweaveListingUtils>  TeX listings package (version
:SweaveListingUtils>  0.5.5)
:SweaveListingUtils> 
:SweaveListingUtils>  Some functions from package 'base'
:SweaveListingUtils>  are intentionally masked ---see
:SweaveListingUtils>  SweaveListingMASK().
:SweaveListingUtils> 
:SweaveListingUtils>  Note that global options are
:SweaveListingUtils>  controlled by
:SweaveListingUtils>  SweaveListingoptions() ---c.f.
:SweaveListingUtils>  ?"SweaveListingoptions".
:SweaveListingUtils> 
:SweaveListingUtils>  For more information see
:SweaveListingUtils>  ?"SweaveListingUtils",
:SweaveListingUtils>  NEWS("SweaveListingUtils")
:SweaveListingUtils>  There is a vignette to this
:SweaveListingUtils>  package; try
:SweaveListingUtils>  vignette("ExampleSweaveListingUtils").


Attaching package: ‘SweaveListingUtils’

The following object(s) are masked from ‘package:base’:

    library, require

:distr>  Object oriented implementation of distributions (version
:distr>  2.3.4)
:distr> 
:distr>  Attention: Arithmetics on distribution objects are
:distr>  understood as operations on corresponding random variables
:distr>  (r.v.s); see distrARITH().
:distr> 
:distr>  Some functions from package 'stats' are intentionally masked
:distr>  ---see distrMASK().
:distr> 
:distr>  Note that global options are controlled by distroptions()
:distr>  ---c.f. ?"distroptions".
:distr> 
:distr>  For more information see ?"distr", NEWS("distr"), as well as
:distr>    http://distr.r-forge.r-project.org/
:distr>  Package "distrDoc" provides a vignette to this package as
:distr>  well as to several extension packages; try
:distr>  vignette("distr").


Attaching package: ‘distr’

The following object(s) are masked from ‘package:stats’:

    df, qqplot, sd

Loading required package: RobLox
Loading required package: lattice
Loading required package: RColorBrewer
Loading required package: distrMod
Loading required package: distrEx
Loading required package: evd

Attaching package: ‘evd’

The following object(s) are masked from ‘package:lattice’:

    qq

Loading required package: actuar

Attaching package: ‘actuar’

The following object(s) are masked from ‘package:grDevices’:

    cm

:distrEx>  Extensions of package distr (version 2.3.2)
:distrEx> 
:distrEx>  Note: Packages "e1071", "moments", "fBasics" should be
:distrEx>  attached /before/ package "distrEx". See distrExMASK().
:distrEx> 
:distrEx>  For more information see ?"distrEx", NEWS("distrEx"), as
:distrEx>  well as
:distrEx>    http://distr.r-forge.r-project.org/
:distrEx>  Package "distrDoc" provides a vignette to this package
:distrEx>  as well as to several related packages; try
:distrEx>  vignette("distr").


Attaching package: ‘distrEx’

The following object(s) are masked from ‘package:stats’:

    IQR, mad, median, var

Loading required package: RandVar
:RandVar>  Implementation of random variables (version 0.8.1)
:RandVar> 
:RandVar>  For more information see ?"RandVar", NEWS("RandVar"), as
:RandVar>  well as
:RandVar>    http://robast.r-forge.r-project.org/
:RandVar>  This package also includes a vignette; try
:RandVar>  vignette("RandVar").

Loading required package: MASS
Loading required package: stats4
:distrMod>  Object oriented implementation of probability models
:distrMod>  (version 2.3.3)
:distrMod> 
:distrMod>  Some functions from pkg's 'base' and 'stats' are
:distrMod>  intentionally masked ---see distrModMASK().
:distrMod> 
:distrMod>  Note that global options are controlled by
:distrMod>  distrModoptions() ---c.f. ?"distrModoptions".
:distrMod> 
:distrMod>  For more information see ?"distrMod",
:distrMod>  NEWS("distrMod"), as well as
:distrMod>    http://distr.r-forge.r-project.org/
:distrMod>  There is a vignette to this package; try
:distrMod>  vignette("distrMod").
:distrMod>  Package "distrDoc" provides a vignette to the other
:distrMod>  distrXXX packages,
:distrMod>  as well as to several related packages; try
:distrMod>  vignette("distr").


Attaching package: ‘distrMod’

The following object(s) are masked from ‘package:stats4’:

    confint

The following object(s) are masked from ‘package:stats’:

    confint

The following object(s) are masked from ‘package:base’:

    norm

Loading required package: RobAStBase
:RobAStBase>  Robust Asymptotic Statistics (version 0.8.1)
:RobAStBase> 
:RobAStBase>  Some functions from pkg's 'stats' and 'graphics'
:RobAStBase>  are intentionally masked ---see RobAStBaseMASK().
:RobAStBase> 
:RobAStBase>  Note that global options are controlled by
:RobAStBase>  RobAStBaseoptions() ---c.f. ?"RobAStBaseoptions".
:RobAStBase> 
:RobAStBase>  For more information see ?"RobAStBase",
:RobAStBase>  NEWS("RobAStBase"), as well as
:RobAStBase>    http://robast.r-forge.r-project.org/


Attaching package: ‘RobAStBase’

The following object(s) are masked from ‘package:graphics’:

    clip

> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("0RobLoxBioC-package")
> ### * 0RobLoxBioC-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RobLoxBioC-package
> ### Title: Infinitesimally robust estimators for preprocessing omics data
> ### Aliases: RobLoxBioC-package RobLoxBioC
> ### Keywords: package
> 
> ### ** Examples
> 
> library(RobLoxBioC)
> 
> 
> 
> cleanEx()
> nameEx("KolmogorovMinDist")
> ### * KolmogorovMinDist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: KolmogorovMinDist
> ### Title: Generic Function for Computing Minimum Kolmogorov Distance for
> ###   Biological Data
> ### Aliases: KolmogorovMinDist KolmogorovMinDist-methods
> ###   KolmogorovMinDist,matrix,Norm-method
> ###   KolmogorovMinDist,AffyBatch,AbscontDistribution-method
> ###   KolmogorovMinDist,BeadLevelList,AbscontDistribution-method
> ### Keywords: robust
> 
> ### ** Examples
> 
> set.seed(123) # to have reproducible results for package checking
> 
> ## matrix method for KolmogorovMinDist
> ind <- rbinom(200, size=1, prob=0.05) 
> X <- matrix(rnorm(200, mean=ind*3, sd=(1-ind) + ind*9), nrow = 2)
> KolmogorovMinDist(X, D = Norm())
$dist
[1] 0.06544843 0.04356402

$n
[1] 100 100

> 
> ## using Affymetrix-Data
> data(SpikeIn)
> probes <- log2(pm(SpikeIn))
> (res <- KolmogorovMinDist(probes, Norm()))
$dist
 [1] 0.1755693 0.1567648 0.1571403 0.1609188 0.1617499 0.1607157 0.1382646
 [8] 0.1471997 0.1693088 0.1836652 0.1787724 0.1601283 0.1729001 0.1519412
[15] 0.1682097 0.1662173 0.1547481 0.1716497 0.1751219 0.1671566

$n
 [1] 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12

> boxplot(res$dist)
> 
> ## Not run: 
> ##D ## "Not run" just because of computation time
> ##D require(affydata)
> ##D data(Dilution)
> ##D res <- KolmogorovMinDist(Dilution[,1], Norm())
> ##D summary(res$dist)
> ##D boxplot(res$dist)
> ##D plot(res$n, res$dist, pch = 20, main = "Kolmogorov distance vs. sample size",
> ##D      xlab = "sample size", ylab = "Kolmogorov distance",
> ##D      ylim = c(0, max(res$dist)))
> ##D uni.n <- min(res$n):max(res$n)
> ##D lines(uni.n, 1/(2*uni.n), col = "orange", lwd = 2)
> ##D legend("topright", legend = "minimal possible distance", fill = "orange")
> ## End(Not run)
> 
> ## using Illumina-Data
> ## Not run: 
> ##D ## "Not run" just because of computation time
> ##D data(BLData)
> ##D res <- KolmogorovMinDist(BLData, Norm(), arrays = 1)
> ##D res1 <- KolmogorovMinDist(BLData, log = TRUE, Norm(), arrays = 1)
> ##D summary(cbind(res$dist, res1$dist))
> ##D boxplot(list(res$dist, res1$dist), names = c("raw", "log-raw"))
> ##D sort(unique(res1$n))
> ##D plot(res1$n, res1$dist, pch = 20, main = "Kolmogorov distance vs. sample size",
> ##D      xlab = "sample size", ylab = "Kolmogorov distance",
> ##D      ylim = c(0, max(res1$dist)), xlim = c(min(res1$n), 56))
> ##D uni.n <- min(res1$n):56
> ##D lines(uni.n, 1/(2*uni.n), col = "orange", lwd = 2)
> ##D legend("topright", legend = "minimal possible distance", fill = "orange")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("SimStudies")
> ### * SimStudies
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimStudies
> ### Title: Perform Monte-Carlo Study.
> ### Aliases: AffySimStudy IlluminaSimStudy
> ### Keywords: robust
> 
> ### ** Examples
> 
> set.seed(123) # to have reproducible results for package checking
> 
> AffySimStudy(n = 11, M = 100, eps = 0.02, contD = Norm(mean = 0, sd = 3), 
+              plot1 = TRUE, plot2 = TRUE, plot3 = TRUE)
dev.new(): using pdf(file="Rplots1.pdf")
                                ML      Med    Tukey       rmx
n x empMSE (loc)         1.2837045 1.826711 1.698428 1.3992302
relMSE (loc)             0.9174362 1.305512 1.213830 1.0000000
n x empMSE (scale)       0.6072430 1.573206 1.573206 0.7236061
relMSE (scale)           0.8391900 2.174119 2.174119 1.0000000
n x empMSE (loc + scale) 1.8909475 3.399917 3.271634 2.1228363
relMSE (loc + scale)     0.8907646 1.601592 1.541162 1.0000000
> IlluminaSimStudy(n = 30, M = 100, eps = 0.02, contD = Norm(mean = 0, sd = 3), 
+                  plot1 = TRUE, plot2 = TRUE, plot3 = TRUE)
dev.new(): using pdf(file="Rplots2.pdf")
dev.new(): using pdf(file="Rplots3.pdf")
                               ML      Med  Illumina       rmx
n x empMSE (loc)         1.172077 1.591148 1.2059413 1.1132052
relMSE (loc)             1.052885 1.429339 1.0833055 1.0000000
n x empMSE (scale)       1.084569 1.331247 0.8164451 0.5927791
relMSE (scale)           1.829635 2.245773 1.3773176 1.0000000
n x empMSE (loc + scale) 2.256646 2.922395 2.0223864 1.7059843
relMSE (loc + scale)     1.322783 1.713026 1.1854660 1.0000000
> 
> 
> 
> cleanEx()
> nameEx("robloxbioc")
> ### * robloxbioc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: robloxbioc
> ### Title: Generic Function for Preprocessing Biological Data
> ### Aliases: robloxbioc robloxbioc-methods robloxbioc,matrix-method
> ###   robloxbioc,AffyBatch-method robloxbioc,beadLevelData-method
> ### Keywords: robust
> 
> ### ** Examples
> 
> set.seed(123) # to have reproducible results for package checking
> 
> ## similar to rowRoblox of package RobLox
> ind <- rbinom(200, size=1, prob=0.05)
> X <- matrix(rnorm(200, mean=ind*3, sd=(1-ind) + ind*9), nrow = 2)
> robloxbioc(X)
            mean       sd
[1,]  0.01361094 1.103944
[2,] -0.13024109 1.023868
> robloxbioc(X, steps = 5)
            mean       sd
[1,]  0.01454172 1.105150
[2,] -0.13018096 1.023832
> robloxbioc(X, eps = 0.05)
            mean       sd
[1,] -0.02555103 1.042593
[2,] -0.16758006 1.004678
> robloxbioc(X, eps = 0.05, steps = 5)
            mean       sd
[1,] -0.02545634 1.042738
[2,] -0.16757528 1.004658
> 
> ## the function is designed for large scale problems
> X <- matrix(rnorm(50000*20, mean = 1), nrow = 50000)
> system.time(robloxbioc(X))
   user  system elapsed 
  5.425   0.084   5.528 
> 
> ## using Affymetrix-Data
> ## confer example to generateExprVal.method.mas
> ## A more worked out example can be found in the scripts folder
> ## of the package.
> data(SpikeIn)
> probes <- pm(SpikeIn) 
> mas <- generateExprVal.method.mas(probes)
> rl <- 2^robloxbioc(log2(t(probes)))
> concentrations <- as.numeric(colnames(SpikeIn))
> plot(concentrations, mas$exprs, log="xy", ylim=c(50,10000), type="b",
+      ylab = "expression measures")
> points(concentrations, rl[,1], pch = 20, col="orange", type="b")
> legend("topleft", c("MAS", "roblox"), pch = c(1, 20))
> 
> ## Not run: 
> ##D ## "Not run" just because of computation time
> ##D require(affydata)
> ##D data(Dilution)
> ##D eset <- robloxbioc(Dilution)
> ##D ## Affymetrix scale normalization
> ##D eset1 <- robloxbioc(Dilution, normalize = TRUE)
> ## End(Not run)
> 
> ## using Illumina-Data
> ## Not run: 
> ##D ## "Not run" just because of computation time
> ##D require(beadarrayExampleData)
> ##D data(exampleBLData)
> ##D res <- robloxbioc(exampleBLData, eps.upper = 0.5)
> ##D res
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  17.865 0.2 18.129 0 0 
> grDevices::dev.off()
pdf 
  2 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
