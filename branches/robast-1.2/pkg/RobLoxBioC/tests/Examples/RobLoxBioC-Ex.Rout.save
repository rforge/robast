
R Under development (unstable) (2019-02-27 r76167) -- "Unsuffered Consequences"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: i386-w64-mingw32/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "RobLoxBioC"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('RobLoxBioC')
Loading required package: distr
Loading required package: startupmsg
:startupmsg>  Utilities for Start-Up Messages (version 0.9.6)
:startupmsg> 
:startupmsg>  For more information see ?"startupmsg",
:startupmsg>  NEWS("startupmsg")

Loading required package: sfsmisc
:distr>  Object Oriented Implementation of Distributions (version
:distr>  2.8.0)
:distr> 
:distr>  Attention: Arithmetics on distribution objects are
:distr>  understood as operations on corresponding random variables
:distr>  (r.v.s); see distrARITH().
:distr> 
:distr>  Some functions from package 'stats' are intentionally masked
:distr>  ---see distrMASK().
:distr> 
:distr>  Note that global options are controlled by distroptions()
:distr>  ---c.f. ?"distroptions".
:distr> 
:distr>  For more information see ?"distr", NEWS("distr"), as well as
:distr>    http://distr.r-forge.r-project.org/
:distr>  Package "distrDoc" provides a vignette to this package as
:distr>  well as to several extension packages; try
:distr>  vignette("distr").


Attaching package: 'distr'

The following objects are masked from 'package:stats':

    df, qqplot, sd

Loading required package: affy
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: 'BiocGenerics'

The following objects are masked from 'package:parallel':

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from 'package:distr':

    sd, width, width<-

The following objects are masked from 'package:stats':

    IQR, mad, sd, var, xtabs

The following objects are masked from 'package:base':

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, basename, cbind, colMeans, colSums, colnames,
    dirname, do.call, duplicated, eval, evalq, get, grep, grepl,
    intersect, is.unsorted, lapply, mapply, match, mget, order, paste,
    pmax, pmax.int, pmin, pmin.int, rank, rbind, rowMeans, rowSums,
    rownames, sapply, setdiff, sort, table, tapply, union, unique,
    unsplit, which, which.max, which.min

Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("0RobLoxBioC-package")
> ### * 0RobLoxBioC-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RobLoxBioC-package
> ### Title: Infinitesimally robust estimators for preprocessing omics data
> ### Aliases: RobLoxBioC-package RobLoxBioC
> ### Keywords: package
> 
> ### ** Examples
> 
> library(RobLoxBioC)
> 
> 
> 
> cleanEx()
> nameEx("KolmogorovMinDist")
> ### * KolmogorovMinDist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: KolmogorovMinDist
> ### Title: Generic Function for Computing Minimum Kolmogorov Distance for
> ###   Biological Data
> ### Aliases: KolmogorovMinDist KolmogorovMinDist-methods
> ###   KolmogorovMinDist,matrix,Norm-method
> ###   KolmogorovMinDist,AffyBatch,AbscontDistribution-method
> ###   KolmogorovMinDist,beadLevelData,AbscontDistribution-method
> ### Keywords: robust
> 
> ### ** Examples
> 
> set.seed(123) # to have reproducible results for package checking
> 
> ## matrix method for KolmogorovMinDist
> ind <- rbinom(200, size=1, prob=0.05) 
> X <- matrix(rnorm(200, mean=ind*3, sd=(1-ind) + ind*9), nrow = 2)
> KolmogorovMinDist(X, D = Norm())
$dist
[1] 0.06544843 0.04356402

$n
[1] 100 100

> 
> ## using Affymetrix data
> data(SpikeIn)
> probes <- log2(pm(SpikeIn))
> (res <- KolmogorovMinDist(probes, Norm()))
$dist
 [1] 0.1642185 0.1567706 0.1571387 0.1609188 0.1617499 0.1607157 0.1382646
 [8] 0.1471997 0.1693088 0.1836652 0.1787724 0.1601283 0.1728984 0.1519412
[15] 0.1682097 0.1662173 0.1547481 0.1716497 0.1751219 0.1671566

$n
 [1] 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12

> boxplot(res$dist)
> 
> ## No test: 
> ## \donttest because of check time
> ## using Affymetrix data
> library(affydata)
     Package    LibPath                              Item      
[1,] "affydata" "C:/Program Files/R/R-devel/library" "Dilution"
     Title                        
[1,] "AffyBatch instance Dilution"
> data(Dilution)
> res <- KolmogorovMinDist(Dilution[,1], Norm())
Background correcting ...Warning: replacing previous import 'AnnotationDbi::head' by 'utils::head' when loading 'hgu95av2cdf'
Warning: replacing previous import 'AnnotationDbi::tail' by 'utils::tail' when loading 'hgu95av2cdf'

 done.
Calculating PM/MM ... done.
Computing minimum Kolmogorov distance ... done.
> summary(res$dist)
      20A         
 Min.   :0.05768  
 1st Qu.:0.09761  
 Median :0.11124  
 Mean   :0.11343  
 3rd Qu.:0.12607  
 Max.   :0.81250  
> boxplot(res$dist)
> plot(res$n, res$dist, pch = 20, main = "Kolmogorov distance vs. sample size",
+      xlab = "sample size", ylab = "Kolmogorov distance",
+      ylim = c(0, max(res$dist)))
> uni.n <- min(res$n):max(res$n)
> lines(uni.n, 1/(2*uni.n), col = "orange", lwd = 2)
> legend("topright", legend = "minimal possible distance", fill = "orange")
> 
> ## Illumina bead level data
> library(beadarrayExampleData)
Loading required package: beadarray
Loading required package: hexbin
Welcome to beadarray version 2.33.2
> data(exampleBLData)
> res <- KolmogorovMinDist(exampleBLData, Norm(), arrays = 1)
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
Warning in pnorm(y, mean = pars[1], sd = pars[2]) : NaNs produced
> res1 <- KolmogorovMinDist(exampleBLData, Norm(), log = TRUE, arrays = 1)
Warning in .local(x, D, ...) : NaNs produced
Warning in .local(x, D, ...) : NaNs produced
> summary(cbind(res$dist, res1$dist))
  4613710017_B      4613710017_B    
 Min.   :0.03507   Min.   :0.03999  
 1st Qu.:0.09037   1st Qu.:0.08376  
 Median :0.10501   Median :0.09711  
 Mean   :0.11476   Mean   :0.09988  
 3rd Qu.:0.12244   3rd Qu.:0.11280  
 Max.   :1.00000   Max.   :0.33333  
 NA's   :34                         
> boxplot(list(res$dist, res1$dist), names = c("raw", "log-raw"))
> sort(unique(res1$n))
 [1]  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27
[26] 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52
[51] 53 54 55 57 58 59 60 61 62 63 64 65 66 67 68 73 74 75 76 77 79 80 84
> plot(res1$n, res1$dist, pch = 20, main = "Kolmogorov distance vs. sample size",
+      xlab = "sample size", ylab = "Kolmogorov distance",
+      ylim = c(0, max(res1$dist)), xlim = c(min(res1$n), 56))
> uni.n <- min(res1$n):56
> lines(uni.n, 1/(2*uni.n), col = "orange", lwd = 2)
> legend("topright", legend = "minimal possible distance", fill = "orange")
> ## End(No test)
> 
> 
> 
> cleanEx()

detaching 'package:beadarrayExampleData', 'package:beadarray',
  'package:hexbin', 'package:hgu95av2cdf', 'package:affydata'

> nameEx("SimStudies")
> ### * SimStudies
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SimStudies
> ### Title: Perform Monte-Carlo Study.
> ### Aliases: AffySimStudy IlluminaSimStudy
> ### Keywords: robust
> 
> ### ** Examples
> 
> set.seed(123) # to have reproducible results for package checking
> 
> AffySimStudy(n = 11, M = 100, eps = 0.02, contD = Norm(mean = 0, sd = 3), 
+              plot1 = TRUE, plot2 = TRUE, plot3 = TRUE)
dev.new(): using pdf(file="Rplots1.pdf")
                                ML      Med    Tukey       rmx
n x empMSE (loc)         1.2837045 1.826711 1.698428 1.3992302
relMSE (loc)             0.9174362 1.305512 1.213830 1.0000000
n x empMSE (scale)       0.6072430 1.573206 1.573206 0.7236061
relMSE (scale)           0.8391900 2.174119 2.174119 1.0000000
n x empMSE (loc + scale) 1.8909475 3.399917 3.271634 2.1228363
relMSE (loc + scale)     0.8907646 1.601592 1.541162 1.0000000
> IlluminaSimStudy(n = 30, M = 100, eps = 0.02, contD = Norm(mean = 0, sd = 3), 
+                  plot1 = TRUE, plot2 = TRUE, plot3 = TRUE)
dev.new(): using pdf(file="Rplots2.pdf")
dev.new(): using pdf(file="Rplots3.pdf")
                               ML      Med  Illumina       rmx
n x empMSE (loc)         1.172077 1.591148 1.2059413 1.1132052
relMSE (loc)             1.052885 1.429339 1.0833055 1.0000000
n x empMSE (scale)       1.084569 1.331247 0.8164451 0.5927791
relMSE (scale)           1.829635 2.245773 1.3773176 1.0000000
n x empMSE (loc + scale) 2.256646 2.922395 2.0223864 1.7059843
relMSE (loc + scale)     1.322783 1.713026 1.1854660 1.0000000
> 
> 
> 
> cleanEx()
> nameEx("robloxbioc")
> ### * robloxbioc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: robloxbioc
> ### Title: Generic Function for Preprocessing Biological Data
> ### Aliases: robloxbioc robloxbioc-methods robloxbioc,matrix-method
> ###   robloxbioc,AffyBatch-method robloxbioc,beadLevelData-method
> ### Keywords: robust
> 
> ### ** Examples
> 
> set.seed(123) # to have reproducible results for package checking
> 
> ## similar to rowRoblox of package RobLox
> ind <- rbinom(200, size=1, prob=0.05)
> X <- matrix(rnorm(200, mean=ind*3, sd=(1-ind) + ind*9), nrow = 2)
> robloxbioc(X)
            mean       sd
[1,]  0.01361094 1.103944
[2,] -0.13024109 1.023868
> robloxbioc(X, steps = 5)
            mean       sd
[1,]  0.01454172 1.105150
[2,] -0.13018096 1.023832
> robloxbioc(X, eps = 0.05)
            mean       sd
[1,] -0.02555103 1.042593
[2,] -0.16758006 1.004678
> robloxbioc(X, eps = 0.05, steps = 5)
            mean       sd
[1,] -0.02545634 1.042738
[2,] -0.16757528 1.004658
> 
> ## No test: 
> ## \donttest to reduce check time
> ## the function is designed for large scale problems
> X <- matrix(rnorm(50000*20, mean = 1), nrow = 50000)
> system.time(robloxbioc(X))
   user  system elapsed 
   0.63    0.01    0.64 
> 
> ## using Affymetrix data
> ## confer example to generateExprVal.method.mas
> ## A more worked out example can be found in the scripts folder
> ## of the package.
> data(SpikeIn)
> probes <- pm(SpikeIn) 
> mas <- generateExprVal.method.mas(probes)
> rl <- 2^robloxbioc(log2(t(probes)))
> concentrations <- as.numeric(colnames(SpikeIn))
> plot(concentrations, mas$exprs, log="xy", ylim=c(50,10000), type="b",
+      ylab = "expression measures")
> points(concentrations, rl[,1], pch = 20, col="orange", type="b")
> legend("topleft", c("MAS", "roblox"), pch = c(1, 20))
> 
> ## Affymetrix dilution data
> library(affydata)
> data(Dilution)
> eset <- robloxbioc(Dilution)
Background correcting ... done.
PM/MM correcting ... done.
Computing expression values ... done.
> ## Affymetrix scale normalization
> eset1 <- robloxbioc(Dilution, normalize = TRUE)
Background correcting ... done.
PM/MM correcting ... done.
Computing expression values ... done.
Scale normalization ... done.
> 
> ## Illumina bead level data
> library(beadarrayExampleData)
Loading required package: beadarray
Loading required package: hexbin
Welcome to beadarray version 2.33.2
> data(exampleBLData)
> res <- robloxbioc(exampleBLData, eps.upper = 0.5)
No sample factor specified. Summarizing each section separately
Finding list of unique probes in beadLevelData
49895  unique probeIDs found
Loading required package: illuminaHumanv3.db
Loading required package: AnnotationDbi
Loading required package: stats4
Loading required package: IRanges
Loading required package: S4Vectors

Attaching package: 'S4Vectors'

The following object is masked from 'package:base':

    expand.grid


Attaching package: 'IRanges'

The following object is masked from 'package:distr':

    gaps

The following object is masked from 'package:grDevices':

    windows

Loading required package: org.Hs.eg.db


Number of unmapped probes removed:  319 
Summarizing  G  channel
Processing Array 1 
Using rmx
Summarizing  G  channel
Processing Array 2 
Using rmx
Making summary object
Annotating control probes using package illuminaHumanv3.db Version:1.26.0

> res
ExpressionSetIllumina (storageMode: list)
assayData: 49576 features, 2 samples 
  element names: exprs, se.exprs, nObservations 
protocolData: none
phenoData
  rowNames: 4613710017_B 4616494005_A
  varLabels: sampleID SampleFac
  varMetadata: labelDescription
featureData
  featureNames: ILMN_1802380 ILMN_1893287 ... ILMN_1846115 (49576
    total)
  fvarLabels: ArrayAddressID IlluminaID Status
  fvarMetadata: labelDescription
experimentData: use 'experimentData(object)'
Annotation: Humanv3 
QC Information
 Available Slots:  
  QC Items: Date, Matrix, ..., SampleGroup, numBeads
  sampleNames: 4613710017_B, 4616494005_A
> ## End(No test)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching 'package:illuminaHumanv3.db', 'package:org.Hs.eg.db',
  'package:AnnotationDbi', 'package:IRanges', 'package:S4Vectors',
  'package:stats4', 'package:beadarrayExampleData',
  'package:beadarray', 'package:hexbin', 'package:hgu95av2cdf',
  'package:affydata'

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  854.42 12.72 1058.02 NA NA 
> grDevices::dev.off()
pdf 
  2 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
